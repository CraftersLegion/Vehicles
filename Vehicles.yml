VehicleStartupInit:
    type: task
    debug: false
    script:
    # Check for Vehicle Database
    - if <server.has_file[data/entities/vehicles.yml]>:
        
        # Load Existing Vehicle Database
        - yaml load:data/entities/vehicles.yml id:vehicles
    
    # Create New One if None Exists
    - else:
        - yaml create id:vehicles
        - yaml savefile:data/entities/vehicles.yml id:vehicles
        
    # Check for Vehicle Library
    - if <server.has_file[data/entities/vehiclesLib.yml]>:
        
        # Load Existing Vehicle Database
        - yaml load:data/entities/vehiclesLib.yml id:vehiclelib
    
    # Create New One if None Exists
    - else:
        - yaml create id:vehicles
        - yaml savefile:data/entities/vehiclesLib.yml id:vehiclelib
        
VehicleSpawn:
    type: task
    debug: false
    script:
    
    # Spawn Vehicle
    - spawn armor_stand[visible=false] <context.location.add[l@0,1,0]> save:vehicle
    - equip <entry[vehicle].spawned_entity> head:<def[vehicleItem]>
    
    # Setup YAML
    - yaml id:vehicles set entities.<entry[vehicle].spawned_entity>.item:<def[vehicleItem]>
    - yaml id:vehicles set entities.<entry[vehicle].spawned_entity>.vehicle:<def[currentVehicle]>
    - yaml id:vehicles set entities.<entry[vehicle].spawned_entity>.owner:<player>
    - yaml savefile:data/entities/vehicles.yml id:vehicles
    
    # Remove Item
    - if <player.gamemode> != CREATIVE:
        - take iteminhand from:<player.inventory>
    
    # Entity Size Mapping
    - if <yaml[vehiclelib].read[<yaml[vehicles].read[entities.<entry[vehicle].spawned_entity>.vehicle]>.small]||null> == true:
        - adjust <entry[vehicle].spawned_entity> is_small:true
    
VehicleEvents:
    type: world
    debug: false
    events:
    
        on player clicks block with wooden_pickaxe:
        - if <context.item.has_custom_model_data>:
            - determine cancelled
    
        # Vehicle Master Init #
        on server prestart:
        - inject VehicleStartupInit
        on reload scripts:
        - yaml unload id:vehiclelib
        - yaml unload id:vehicles
        - inject VehicleStartupInit
    
        on player right clicks block:
        - define vehicleItem null
        - foreach <yaml[vehiclelib].list_keys[]> as:vehicle:
            - foreach <yaml[vehiclelib].list_keys[<def[vehicle]>.colors]> as:color:
                - if <context.item.script.name||null> == <yaml[vehiclelib].read[<def[vehicle]>.colors.<def[color]>.model].as_item.script.name>:
                    - define vehicleItem <yaml[vehiclelib].read[<def[vehicle]>.colors.<def[color]>.model]>
                    - define currentVehicle <def[vehicle]>
                    - foreach stop
                    - foreach stop
        - if <def[vehicleItem]> != null:
            - inject VehicleSpawn
        
        on player right clicks armor_stand:
        # Check if Vehicle
        - if <yaml[vehicles].list_keys[entities].as_list.contains[<context.entity>]>:
            - if <context.item||null> == i@air:
                # Check Passenger Not Already Riding
                - if !<context.entity.has_passenger>:
                    # Check if Rider is Owner
                    - if <player> == <yaml[vehicles].read[entities.<context.entity>.owner]>:
                        # Setup Vehicle Flags
                        - flag <context.entity> standardSpeedType:<yaml[vehiclelib].read[<yaml[vehicles].read[entities.<context.entity>.vehicle]>.speedModifier.standard.type]>
                        - flag <context.entity> standardSpeed:<yaml[vehiclelib].read[<yaml[vehicles].read[entities.<context.entity>.vehicle]>.speedModifier.standard.speed]>
                        - mount <player>|<context.entity>
            - else if <context.item.has_custom_model_data>:
                - if <context.item.display.as_element.split[<&sp>].get[1].to_lowercase> == "light":
                    - define color "<context.item.display.as_element.split[<&sp>].get[1].to_lowercase>_<context.item.display.as_element.split[<&sp>].get[2].to_lowercase>"
                - else:
                    - define color <context.item.display.as_element.split[<&sp>].get[1].to_lowercase>
                - equip <context.entity> head:<yaml[vehiclelib].read[<yaml[vehicles].read[entities.<context.entity>.vehicle]>.colors.<def[color]>.model]>
                
                # Remove Item
                - if <player.gamemode> != CREATIVE:
                    - take iteminhand from:<player.inventory>
            - else:
                - determine cancelled
            - determine cancelled
        
        on player steers entity:
        - if !<context.entity.is_npc>:
            - if <context.entity.entity_type> == ARMOR_STAND:
                # Check if Vehicle
                - if <yaml[vehicles].list_keys[entities].as_list.contains[<context.entity>]>:
                    - if <yaml[vehiclelib].read[<yaml[vehicles].read[entities.<context.entity>.vehicle]>.type]> == LAND:
                        - if <context.entity.flag[standardSpeedType]> == ADD:
                            - define vehicleVector <context.entity.location.direction.vector.mul[<context.entity.flag[standardSpeed]>]>
                        - else if <context.entity.flag[standardSpeedType]> == SUB:
                            - define vehicleVector <context.entity.location.direction.vector.div[<context.entity.flag[standardSpeed]>]>
                        - else:
                            - define vehicleVector <context.entity.location.direction.vector>
                        - define x <player.location.direction.vector.x>
                        - define y <context.entity.location.direction.vector.y>
                        - define z <player.location.direction.vector.z>
                        - define playerVector 'l@<def[x]>,<def[y]>,<def[z]>'
                        - look <context.entity> <context.entity.location.add[<def[playerVector].normalize>]>
                        - define materials li@m@air|m@grass|m@poppy|m@dandelion|m@oak_fence|m@spruce_fence|m@acacia_fence|m@birch_fence|m@jungle_fence|m@dark_oak_fence
                        
                        - if <context.forward> > 0:
                            - if <yaml[vehiclelib].read[<yaml[vehicles].read[entities.<context.entity>.vehicle]>.small]||null> == true:
                                - if !<def[materials].as_list.contains[<player.location.add[l@0,1,0].add[<context.entity.location.direction.vector>].material>]> && <player.location.add[l@0,2,0].add[<context.entity.location.direction.vector>].material> == m@air:
                                    - adjust <context.entity> armor_pose:HEAD|-0.6,0,0
                                    - adjust <context.entity> move:<def[vehicleVector].add[l@0,1.5,0]>
                                - else:
                                    - adjust <context.entity> armor_pose:HEAD|0,0,0
                                    - adjust <context.entity> move:<def[vehicleVector]>
                            - else:
                                - if !<def[materials].as_list.contains[<player.location.add[<context.entity.location.direction.vector>].material>]> && <player.location.add[l@0,1,0].add[<context.entity.location.direction.vector>].material> == m@air:
                                    - adjust <context.entity> armor_pose:HEAD|-0.6,0,0
                                    - adjust <context.entity> move:<def[vehicleVector].add[l@0,1.5,0]>
                                - else if <player.location.add[l@0,-1,0].add[<context.entity.location.direction.vector>].material> == m@air:
                                    - adjust <context.entity> armor_pose:HEAD|0.6,0,0
                                    - adjust <context.entity> move:<def[vehicleVector].add[l@0,-1.5,0]>
                                - else:
                                    - adjust <context.entity> armor_pose:HEAD|0,0,0
                                    - adjust <context.entity> move:<def[vehicleVector]>
                                    
VehicleCommand:
    type: command
    debug: false
    name: vehicle
    aliases:
    - v
    script:
    - foreach <yaml[vehicles].list_keys[entities]> as:vehicle:
        - remove <def[vehicle].as_entity>
        - yaml id:vehicles set entities.<def[vehicle]>:!