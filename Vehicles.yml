VehicleStartupInit:
    type: task
    debug: false
    script:
    # Check for Vehicle Database
    - if <server.has_file[data/entities/vehicles.yml]>:
        
        # Load Existing Vehicle Database
        - yaml load:data/entities/vehicles.yml id:vehicles
    
    # Create New One if None Exists
    - else:
        - yaml create id:vehicles
        - yaml savefile:data/entities/vehicles.yml id:vehicles
        
    # Check for Vehicle Library
    - if <server.has_file[data/entities/vehiclesLib.yml]>:
        
        # Load Existing Vehicle Database
        - yaml load:data/entities/vehiclesLib.yml id:vehiclelib
    
    # Create New One if None Exists
    - else:
        - yaml create id:vehicles
        - yaml savefile:data/entities/vehiclesLib.yml id:vehiclelib
        
VehicleSpawn:
    type: task
    debug: false
    script:
    
    # Spawn Vehicle
    - spawn armor_stand[visible=false] <context.location.add[l@0,1,0]> save:vehicle
    - equip <entry[vehicle].spawned_entity> head:<def[vehicleItem]>
    
    # Setup YAML
    - yaml id:vehicles set entities.<entry[vehicle].spawned_entity>.item:<def[vehicleItem]>
    - yaml id:vehicles set entities.<entry[vehicle].spawned_entity>.vehicle:<def[vehicle]>
    - yaml id:vehicles set entities.<entry[vehicle].spawned_entity>.owner:<player>
    - yaml savefile:data/entities/vehicles.yml id:vehicles
    
VehicleEvents:
    type: world
    debug: false
    events:
    
        # Vehicle Master Init #
        on server prestart:
        - inject VehicleStartupInit
        on reload scripts:
        - inject VehicleStartupInit
    
        on player right clicks block:
        - define vehicleItem null
        - foreach <yaml[vehiclelib].list_keys[]> as:vehicle:
            - foreach <yaml[vehiclelib].list_keys[<def[vehicle]>.colors]> as:color:
                - if <context.item.script.name||null> == <yaml[vehiclelib].read[<def[vehicle]>.colors.<def[color]>.model].as_item.script.name>:
                    - define vehicleItem <yaml[vehiclelib].read[<def[vehicle]>.colors.<def[color]>.model]>
                    - foreach stop
                    - foreach stop
        - if <def[vehicleItem]> != null:
            - inject VehicleSpawn
        
        on player right clicks armor_stand:
        # Check if Vehicle
        - if <yaml[vehicles].list_keys[entities].as_list.contains[<context.entity>]>:
            # Check Passenger Not Already Riding
            - if !<context.entity.has_passenger>:
                # Check if Rider is Owner
                - if <player> == <yaml[vehicles].read[entities.<context.entity>.owner]>:
                    - mount <player>|<context.entity>
            - determine cancelled
        
        on player steers entity:
        - if !<context.entity.is_npc>:
            - if !<player.has_flag[vehicleVelocity]>:
                - flag player vehicleVelocity:0
            - define vehicleVector <context.entity.location.direction.vector>
            - define x <player.location.direction.vector.x>
            - define y <context.entity.location.direction.vector.y>
            - define z <player.location.direction.vector.z>
            - define playerVector 'l@<def[x]>,<def[y]>,<def[z]>'
            - look <context.entity> <context.entity.location.add[<def[playerVector].normalize>]>
            - if <context.forward> > 0:
                - if <player.location.add[<context.entity.location.direction.vector>].material> != m@air && <player.location.add[l@0,1,0].add[<context.entity.location.direction.vector>].material> == m@air:
                    - adjust <context.entity> armor_pose:HEAD|-0.6,0,0
                    - adjust <context.entity> move:<def[vehicleVector].add[l@0,1.5,0]>
                - else if <player.location.add[l@0,-1,0].add[<context.entity.location.direction.vector>].material> == m@air:
                    - adjust <context.entity> armor_pose:HEAD|0.6,0,0
                    - adjust <context.entity> move:<def[vehicleVector].add[l@0,-1.5,0]>
                - else:
                    - adjust <context.entity> armor_pose:HEAD|0,0,0
                    - adjust <context.entity> move:<def[vehicleVector]>